#Использовать autumn
#Использовать asserts
#Использовать ".."
#Использовать "."

Перем мСообщенияЛога;

Процедура ПередЗапускомТеста() Экспорт

КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт

КонецПроцедуры

Функция ПодготовитьПоделку()
	Поделка = Новый Поделка();
	Поделка.ПросканироватьКаталог("src/Классы");
	Поделка.ПросканироватьКаталог("tests/Классы");
	Возврат Поделка;
КонецФункции

Процедура ДобавитьСебяКакОбработчикаВывода(Лог)

	мСообщенияЛога = Новый Массив;
	Лог.ДобавитьСпособВывода(ЭтотОбъект);

КонецПроцедуры

Процедура Вывести(Знач Сообщение, УровеньСообщения) Экспорт
	мСообщенияЛога.Добавить(Сообщение);
КонецПроцедуры

Процедура Закрыть() Экспорт
	мСообщенияЛога = Неопределено;
КонецПроцедуры

&Тест
Процедура Должен_ПроверитьПолучениеЛогаВЭкпортноеПоле() Экспорт
	
	// Дано 
	Поделка = ПодготовитьПоделку();
	Поделка.ЗапуститьПриложение();

	// Когда 
	КонтейнерЛога = Поделка.НайтиЖелудь("КонтейнерЛога");
	Лог = КонтейнерЛога.ЭкспортныйЛог;
	ДобавитьСебяКакОбработчикаВывода(Лог);
	Лог.УстановитьУровень(УровниЛога.Отладка);
	Лог.Информация("Запись лога");

	ПриватныйЛог = КонтейнерЛога.ПриватныйЛог();

	// Тогда
	Ожидаем.Что(Лог, "тип логгера").ИмеетТип(Тип("Лог"));
	Ожидаем.Что(мСообщенияЛога[0], "сообщение залогировано корректно").Равно("ИНФОРМАЦИЯ - [prefix.КонтейнерЛога] - Запись лога");
	Ожидаем.Что(ПриватныйЛог, "тип приватного логгера").ИмеетТип(Тип("Лог"));
	// Ожидаем.Что(Лог, "Логгерны не равны").Не_().Равно(ПриватныйЛог);

КонецПроцедуры

Должен_ПроверитьПолучениеЛогаВЭкпортноеПоле();
