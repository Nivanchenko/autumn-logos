#Использовать logos
#Использовать tempfiles

Перем _НастройкиУровнейЛогов;
Перем _НастройкиАппендеров;
Перем _Поделка;

Процедура ПриИнициализацииПоделки(Поделка) Экспорт
	_Поделка = Поделка;

	ИнициализацияЛогов();

	ВременныеФайлы.Удалить();
КонецПроцедуры

Процедура ИнициализацияЛогов()

	НастройкиЛогированияСтрокой = СформироватьСтрокуНастроек();
	Если ЗначениеЗаполнено(НастройкиЛогированияСтрокой) Тогда
		НастройкиЛогирования = Логирование.ПолучитьНастройки();
		НастройкиЛогирования.ПрочитатьИзСтроки(НастройкиЛогированияСтрокой);
	КонецЕсли;

КонецПроцедуры

&Заготовка
Процедура ПриСозданииОбъекта(
	&Деталька(Значение = "logos.logger", ЗначениеПоУмолчанию = Неопределено) НастройкиУровнейЛогов,
	&Деталька(Значение = "logos.appender", ЗначениеПоУмолчанию = Неопределено) НастройкиАппендеров
	)
	_НастройкиАппендеров = ?(НастройкиАппендеров = Неопределено, Новый Соответствие(), НастройкиАппендеров);
	_НастройкиУровнейЛогов = ?(НастройкиУровнейЛогов = Неопределено, Новый Соответствие(), НастройкиУровнейЛогов);
КонецПроцедуры

Функция СформироватьСтрокуНастроек()
	Результат = Новый Массив();

	ДобавитьНастройкуУровнейЛогов(Результат);

	ДобавитьНастройкуАппендеров(Результат);

	Возврат СтрСоединить(Результат, Символы.ПС);
КонецФункции

Процедура ДобавитьНастройкуУровнейЛогов(МассивРезультата)

	Для Каждого ТекущийЛог Из _НастройкиУровнейЛогов Цикл

		Если ТипЗнч(ТекущийЛог.Значение) = Тип("Строка") Тогда
			
			Если ВРег(ТекущийЛог.Значение) = "DEFAULT" Тогда
				Продолжить;
			КонецЕсли;

			ТекущаяСтрока = "logger." + ТекущийЛог.Ключ + "=" + ВРег(ТекущийЛог.Значение);

		Иначе

			Если ВРег(ТекущийЛог.Значение["level"]) = "DEFAULT" Тогда
				Продолжить;
			КонецЕсли;

			ТекущаяСтрока = "logger." + ТекущийЛог.Ключ + "=" + ВРег(ТекущийЛог.Значение["level"]);

			АппендерыЛога = ТекущийЛог.Значение["appenders"];
			Если НЕ АппендерыЛога = Неопределено Тогда
				ТекущаяСтрока = ТекущаяСтрока + ", " + СформироватьСтрокуАппендеров(АппендерыЛога);
			КонецЕсли;

			СоздатьРаскладку(ТекущийЛог);

		КонецЕсли;
		
		МассивРезультата.Добавить(ТекущаяСтрока);

	КонецЦикла;

КонецПроцедуры

Функция СформироватьСтрокуАппендеров(АппендерыЛога)
	Результат = АппендерыЛога;
	
	Если ТипЗнч(АппендерыЛога) = Тип("Массив") Тогда
		Результат = СтрСоединить(АппендерыЛога, ", ");
	КонецЕсли;

	Возврат Результат;

КонецФункции

Процедура ДобавитьНастройкуАппендеров(МассивРезультата)

	Для Каждого ТекАппендер Из _НастройкиАппендеров Цикл
		ИмяАппендера = "appender." + ТекАппендер.Ключ;
		Для Каждого ПараметрАппендера Из ТекАппендер.Значение Цикл
			Если ПараметрАппендера.Ключ = "type" Тогда
				МассивРезультата.Добавить(ИмяАппендера + "=" + ПараметрАппендера.Значение);
			Иначе
				МассивРезультата.Добавить(ИмяАппендера + "." + ПараметрАппендера.Ключ + "=" + ПараметрАппендера.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Процедура СоздатьРаскладку(КлючИЗначение)
	ИмяЛога = КлючИЗначение.Ключ;

	Для каждого ТекущаяОпция Из КлючИЗначение.Значение Цикл
		Если НРег(ТекущаяОпция.Ключ) = "stringlayout" Тогда
			РаскладкаСтрока = ТекущаяОпция.Значение;

			ТекстКлассаРасклади = СформироватьКлассРаскладки(РаскладкаСтрока);
			ИмяКласса = СтрЗаменить(ИмяЛога, ".", "");
			ПутьКФайлу = ЗаписатьКлассВоВРеменныйФайл(ТекстКлассаРасклади);
			
			ПодключитьСценарий(ПутьКФайлу, ИмяКласса);

			_Поделка.ДобавитьЖелудь(Тип(ИмяКласса));
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция СформироватьКлассРаскладки(Знач СтрокаРаскладки)

	Текст = ШаблонКлассаРаскладки();
	ПараметрыСтрШаблон = Новый Массив();
	СчетчикПараметров = 1;
	
	Для Каждого ТекПараметр из ДопустимыПараметрыСтроковойРаскладки() Цикл
		Если СтрНайти(СтрокаРаскладки, ТекПараметр) > 0 Тогда

			СтрокаРаскладки = СтрЗаменить(СтрокаРаскладки, ТекПараметр, "%" + СчетчикПараметров);
			ПараметрыСтрШаблон.Добавить(СтрЗаменить(ТекПараметр, "%", ""));
			СчетчикПараметров = СчетчикПараметров + 1;

		КонецЕсли;
	КонецЦикла;

	Возврат СтрШаблон(Текст, """" + СтрокаРаскладки + """, " + СтрСоединить(ПараметрыСтрШаблон, ", "));

КонецФункции

Функция ДопустимыПараметрыСтроковойРаскладки()
	Возврат СтрРазделить("%ДатаВремя%,%Уровень%,%Сообщение%", ",");
КонецФункции

Функция ЗаписатьКлассВоВРеменныйФайл(ТекстКласса)

	ИмяФайла = ВременныеФайлы.СоздатьФайл("os");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ТекстКласса);
	ЗаписьТекста.Закрыть();

	Возврат ИмяФайла;
КонецФункции

Функция ШаблонКлассаРаскладки()
	Возврат " 
	|&Желудь
	|Процедура ПриСозданииОбъекта()
	|КонецПроцедуры
	|Функция Форматировать(Знач УровеньЧислом, Знач Сообщение) Экспорт
	|	ДатаВремя = ТекущаяДата();
	|	Уровень = УровниЛога.НаименованиеУровня(УровеньЧислом);
    |	Возврат СтрШаблон(%1);
	|КонецФункции";

КонецФункции
