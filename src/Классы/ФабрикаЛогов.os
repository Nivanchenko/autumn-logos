#Использовать logos
#Использовать autumn

Перем НастройкиЛогов;
Перем Раскладки;
Перем _Поделка;
Перем Рефлектор;
Перем НастройкиАппендеров;
Перем КартаУровней;

&Дуб
Процедура ПриСозданииОбъекта(
							&Деталька(Значение = "logos.logger", ЗначениеПоУмолчанию = Неопределено) _НастройкиУровнейЛогов,
							&Деталька(Значение = "logos.appender", ЗначениеПоУмолчанию = Неопределено) _НастройкиАппендеров
							&Пластилин Поделка
							)
	НастройкиЛогов = ?(_НастройкиУровнейЛогов = Неопределено, Новый Соответствие(), _НастройкиУровнейЛогов);
	НастройкиАппендеров = ?(_НастройкиАппендеров = Неопределено, Новый Соответствие(), _НастройкиАппендеров);
	_Поделка = Поделка;
	Рефлектор = Новый Рефлектор();
	ЗаполнитьСоответствиеЛогаИРаскладки()
КонецПроцедуры

&Завязь
&Характер("Компанейский")
Функция Лог(&Блестяшка ИмяЛогаПолное, &Блестяшка ИмяЛога) Экспорт

	Лог = Логирование.ПолучитьЛог(ИмяЛогаПолное);
	
	ЗаполнитьРаскладку(Лог, ИмяЛога);

	ЗаполнитьАппендер(Лог, ИмяЛога);

	Возврат Лог;

КонецФункции

Процедура ЗаполнитьАппендер(Лог, ИмяЛога)
	
	НастройкаЛога = НастройкиЛогов.Получить(ИмяЛога);
	
	Если НастройкаЛога = Неопределено ИЛИ ТипЗнч(НастройкаЛога) = Тип("Строка") Тогда
		Возврат;
	КонецЕсли;

	ДанныеОбАппендерах = НастройкаЛога.Получить("appenders");

	МассивИменАппендеров = ПолучитьАппендерыИзНастройки(ДанныеОбАппендерах);

	АппендерыЛога = ПрочитатьАппендерыИзЛога(Лог);

	Для Каждого ТекущийАппендер Из МассивИменАппендеров Цикл
		НастройкаАппендера = НастройкиАппендеров.Получить(ТекущийАппендер);
		ТипАппендера = НастройкаАппендера["type"];

		Если ТипАппендера = Неопределено 
			ИЛИ НРег(ТипАппендера) = НРег("ВыводЛогаВКонсоль") 
			ИЛИ НРег(ТипАппендера) = НРег("ВыводЛогаВФайл") Тогда
			Продолжить;
		КонецЕсли;

		АппендерЖелудь = _Поделка.НайтиЖелудь(ТипАппендера);

		АппендерЛога = НайтиВМассивеПоТипу(АппендерыЛога, ТипАппендера);

		Если НЕ АппендерЛога = Неопределено Тогда
			Лог.УдалитьСпособВывода(АппендерЛога);
		КонецЕсли;

		СконфигурироватьАппендер(АппендерЖелудь, НастройкаАппендера);

		Лог.ДобавитьСпособВывода(АппендерЖелудь, ПолучитьУровень(НастройкаАппендера["level"]));

	КонецЦикла;

КонецПроцедуры

Функция ПолучитьУровень(Уровень)
	
	ПроинициализироватьКартуУровней();

	Возврат КартаУровней[Уровень];
	
КонецФункции

Процедура ПроинициализироватьКартуУровней()
	Если КартаУровней = Неопределено Тогда
		КартаУровней = Рефлектор.ПолучитьСвойство(Логирование.ПолучитьНастройки(), "мКартаУровней")
	КонецЕсли
КонецПроцедуры

Процедура СконфигурироватьАппендер(Аппендер, НастройкаАппендера)
	Для каждого КлючИЗначение Из НастройкаАппендера Цикл
		Аппендер.УстановитьСвойство(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
КонецПроцедуры

Функция НайтиВМассивеПоТипу(Массив, ИскомыйТипСтрокой)
	
	Для каждого Аппендер Из Массив Цикл
		Если Строка(ТипЗнч(Аппендер)) = ИскомыйТипСтрокой Тогда
			Возврат Аппендер;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Неопределено; 
КонецФункции

Функция ПрочитатьАппендерыИзЛога(Лог)
	Возврат Рефлектор.ПолучитьСвойство(Лог, "мСпособыВывода");
КонецФункции

Функция ПолучитьАппендерыИзНастройки(НастройкаЛога = Неопределено)
	
	Результат = Новый Массив();

	Если ТипЗнч(НастройкаЛога) = Тип("Строка") Тогда
		ПромежуточныйМассив = СтрРазделить(НастройкаЛога, ",");
	ИначеЕсли ТипЗнч(НастройкаЛога) = Тип("Массив") Тогда
		ПромежуточныйМассив = НастройкаЛога;
	Иначе
		Возврат Результат;
	КонецЕсли;

	Для Каждого ТекИмя из ПромежуточныйМассив Цикл
		Результат.Добавить(СокрЛП(ТекИмя));
	КонецЦикла;

	Возврат Результат;

КонецФункции

Процедура ЗаполнитьРаскладку(Лог, ИмяЛога)
	ИмяКласса = Раскладки.Получить(ИмяЛога);

	Если Не ИмяКласса = Неопределено Тогда
		Лог.УстановитьРаскладку(_Поделка.НайтиЖелудь(ИмяКласса));
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьСоответствиеЛогаИРаскладки()

	Раскладки = Новый Соответствие();

	Для Каждого ТекущийЛог Из НастройкиЛогов Цикл
		Если НЕ ТипЗнч(ТекущийЛог.Значение) = Тип("Строка") Тогда

			Для каждого ТекОпция Из ТекущийЛог.Значение Цикл

				Если НРег(ТекОпция.Ключ) = "classlayout" Тогда
					Раскладки.Вставить(НРег(ТекущийЛог.Ключ), ТекОпция.Значение);

				ИначеЕсли НРег(ТекОпция.Ключ) = "stringlayout" Тогда
					Раскладки.Вставить(НРег(ТекущийЛог.Ключ), СтрЗаменить(ТекущийЛог.Ключ, ".", ""));

				КонецЕсли;
				
			КонецЦикла;

		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

